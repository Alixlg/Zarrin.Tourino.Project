// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Zarrin.Tourino.Core.DBContext;

#nullable disable

namespace Zarrin.Tourino.Core.Migrations
{
    [DbContext(typeof(DbData))]
    [Migration("20250729071617_M125_7_29")]
    partial class M125_7_29
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("AccountBaseAttributesTicketModel", b =>
                {
                    b.Property<int>("ReferrersId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TicketsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReferrersId", "TicketsId");

                    b.HasIndex("TicketsId");

                    b.ToTable("AccountBaseAttributesTicketModel");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.ActivityArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Province")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TourLeaderModelId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TourLeaderVerificationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TourLeaderModelId");

                    b.HasIndex("TourLeaderVerificationId");

                    b.ToTable("ActivityArea");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfSingup")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("NationalCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ulong>("PhoneNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfileImageForeignKey")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AccountBaseAttributes");

                    b.HasDiscriminator().HasValue("AccountBaseAttributes");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.LogsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogMessage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LogType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.ScoreModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AmountScore")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TourLeaderModelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VoterId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TourLeaderModelId");

                    b.HasIndex("VoterId");

                    b.ToTable("ScoreModel");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TicketMessageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<int>("MessageOwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MessageSendTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Messages")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TicketMessageModelId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TicketModelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MessageOwnerId");

                    b.HasIndex("TicketMessageModelId");

                    b.HasIndex("TicketModelId");

                    b.ToTable("TicketMessages");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TicketModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastTicketUpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OpenTicketTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("TicketFirstMessage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TicketPriority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TicketStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TicketTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TicketType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TourLeaderReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdminResponse")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReporteText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReporteTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReporterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TourLeaderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.HasIndex("TourLeaderId");

                    b.ToTable("TourLeaderReports");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TourModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TourLeaderModelId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TourLeaderModelId1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserModelId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserModelId1")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TourLeaderModelId");

                    b.HasIndex("TourLeaderModelId1");

                    b.HasIndex("UserModelId");

                    b.HasIndex("UserModelId1");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TourReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdminResponse")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReporteText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReporteTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReporterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetTourId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.HasIndex("TargetTourId");

                    b.ToTable("TourReport");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.AdminModel", b =>
                {
                    b.HasBaseType("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes");

                    b.Property<int>("AdminRole")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TicketModelId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("TicketModelId");

                    b.HasDiscriminator().HasValue("AdminModel");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TourLeaderModel", b =>
                {
                    b.HasBaseType("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes");

                    b.PrimitiveCollection<string>("ActivityTours")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("TEXT");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("TEXT");

                    b.Property<double>("AverageScores")
                        .HasColumnType("REAL");

                    b.Property<int>("ExperienceLevel")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeaderAccountLevel")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Subscription")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("TourLeaderHonors")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TourLeaderModelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserCommentsKey")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserModelId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("TourLeaderModelId");

                    b.HasIndex("UserModelId");

                    b.HasDiscriminator().HasValue("TourLeaderModel");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TourLeaderVerification", b =>
                {
                    b.HasBaseType("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes");

                    b.PrimitiveCollection<string>("ActivityTours")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("TEXT");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("TEXT");

                    b.Property<int>("ExperienceLevel")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("IdentityDocumentsKey")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeaderAccountLevel")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("TourLeaderVerification");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.UserModel", b =>
                {
                    b.HasBaseType("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes");

                    b.Property<string>("AboutMe")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("IdentityDocumentsKey")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("SocialMediaLinks")
                        .HasColumnType("TEXT");

                    b.Property<int>("Subscription")
                        .HasColumnType("INTEGER");

                    b.ToTable("AccountBaseAttributes", t =>
                        {
                            t.Property("IdentityDocumentsKey")
                                .HasColumnName("UserModel_IdentityDocumentsKey");

                            t.Property("Subscription")
                                .HasColumnName("UserModel_Subscription");
                        });

                    b.HasDiscriminator().HasValue("UserModel");
                });

            modelBuilder.Entity("AccountBaseAttributesTicketModel", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes", null)
                        .WithMany()
                        .HasForeignKey("ReferrersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zarrin.Tourino.Core.Entities.TicketModel", null)
                        .WithMany()
                        .HasForeignKey("TicketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.ActivityArea", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.TourLeaderModel", null)
                        .WithMany("ActivityArea")
                        .HasForeignKey("TourLeaderModelId");

                    b.HasOne("Zarrin.Tourino.Core.Entities.TourLeaderVerification", null)
                        .WithMany("ActivityArea")
                        .HasForeignKey("TourLeaderVerificationId");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.LogsModel", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes", "Account")
                        .WithMany("Logs")
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.ScoreModel", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.TourLeaderModel", null)
                        .WithMany("AllTourLeaderScores")
                        .HasForeignKey("TourLeaderModelId");

                    b.HasOne("Zarrin.Tourino.Core.Entities.UserModel", "Voter")
                        .WithMany()
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TicketMessageModel", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes", "MessageOwner")
                        .WithMany()
                        .HasForeignKey("MessageOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zarrin.Tourino.Core.Entities.TicketMessageModel", null)
                        .WithMany("SubMessages")
                        .HasForeignKey("TicketMessageModelId");

                    b.HasOne("Zarrin.Tourino.Core.Entities.TicketModel", null)
                        .WithMany("TicketMessages")
                        .HasForeignKey("TicketModelId");

                    b.Navigation("MessageOwner");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TourLeaderReport", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zarrin.Tourino.Core.Entities.TourLeaderModel", "TourLeader")
                        .WithMany("Reports")
                        .HasForeignKey("TourLeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reporter");

                    b.Navigation("TourLeader");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TourModel", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.TourLeaderModel", null)
                        .WithMany("InterestsTours")
                        .HasForeignKey("TourLeaderModelId");

                    b.HasOne("Zarrin.Tourino.Core.Entities.TourLeaderModel", null)
                        .WithMany("Tours")
                        .HasForeignKey("TourLeaderModelId1");

                    b.HasOne("Zarrin.Tourino.Core.Entities.UserModel", null)
                        .WithMany("InterestsTours")
                        .HasForeignKey("UserModelId");

                    b.HasOne("Zarrin.Tourino.Core.Entities.UserModel", null)
                        .WithMany("Trips")
                        .HasForeignKey("UserModelId1");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TourReport", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zarrin.Tourino.Core.Entities.TourModel", "TargetTour")
                        .WithMany("Reports")
                        .HasForeignKey("TargetTourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reporter");

                    b.Navigation("TargetTour");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.AdminModel", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.TicketModel", null)
                        .WithMany("Responders")
                        .HasForeignKey("TicketModelId");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TourLeaderModel", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.TourLeaderModel", null)
                        .WithMany("InterestsTourLeaders")
                        .HasForeignKey("TourLeaderModelId");

                    b.HasOne("Zarrin.Tourino.Core.Entities.UserModel", null)
                        .WithMany("InterestsTourLeaders")
                        .HasForeignKey("UserModelId");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TicketMessageModel", b =>
                {
                    b.Navigation("SubMessages");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TicketModel", b =>
                {
                    b.Navigation("Responders");

                    b.Navigation("TicketMessages");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TourModel", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TourLeaderModel", b =>
                {
                    b.Navigation("ActivityArea");

                    b.Navigation("AllTourLeaderScores");

                    b.Navigation("InterestsTourLeaders");

                    b.Navigation("InterestsTours");

                    b.Navigation("Reports");

                    b.Navigation("Tours");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TourLeaderVerification", b =>
                {
                    b.Navigation("ActivityArea");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.UserModel", b =>
                {
                    b.Navigation("InterestsTourLeaders");

                    b.Navigation("InterestsTours");

                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
