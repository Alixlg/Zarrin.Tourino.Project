// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Zarrin.Tourino.Core.DBContext;

#nullable disable

namespace Zarrin.Tourino.Core.Migrations
{
    [DbContext(typeof(DbData))]
    [Migration("20250803091600_M125_08_03")]
    partial class M125_08_03
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("AccountBaseAttributesSupportTicket", b =>
                {
                    b.Property<int>("ReferrersId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TicketsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReferrersId", "TicketsId");

                    b.HasIndex("TicketsId");

                    b.ToTable("AccountBaseAttributesSupportTicket");
                });

            modelBuilder.Entity("TourUserAccount", b =>
                {
                    b.Property<int>("TourUserMembersId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TripsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TourUserMembersId", "TripsId");

                    b.HasIndex("TripsId");

                    b.ToTable("TourUserAccount");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.ActivitieLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogMessage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LogType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("ActivitieLogs");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.ActivityArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Province")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TourLeaderAccountId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TourLeaderAccountId");

                    b.ToTable("ActivityArea");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfSingup")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("NationalCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ulong>("PhoneNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfileImageForeignKey")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AccountBaseAttributes");

                    b.HasDiscriminator().HasValue("AccountBaseAttributes");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.InterestsEntitie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("EntitieGuid")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TourLeaderAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TourLeaderAccountId1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserAccountId1")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TourLeaderAccountId");

                    b.HasIndex("TourLeaderAccountId1");

                    b.HasIndex("UserAccountId");

                    b.HasIndex("UserAccountId1");

                    b.ToTable("InterestsEntitie");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.Score", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AmountScore")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TourLeaderAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VoterId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TourLeaderAccountId");

                    b.HasIndex("VoterId");

                    b.ToTable("Score");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.SupportTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastTicketUpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OpenTicketTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("TicketFirstMessage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TicketPriority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TicketStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TicketTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TicketType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SupportTickets");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.SupportTicketMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<int>("MessageOwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MessageSendTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Messages")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SupportTicketId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SupportTicketMessageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MessageOwnerId");

                    b.HasIndex("SupportTicketId");

                    b.HasIndex("SupportTicketMessageId");

                    b.ToTable("SupportTicketMessages");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccommodationType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Attributes")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DepartureDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("ImagesForeignKeys")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVip")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxAge")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinAge")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PreviewImageForeignKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ulong>("PricePerPerson")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReturnDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("TourCountry")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TourDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TourDifficulty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TourMaximumMembers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TourName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TourOwnerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TourOwnerId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TourLeaderReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdminResponse")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReporteText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReporteTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReporterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TourLeaderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.HasIndex("TourLeaderId");

                    b.ToTable("TourLeaderReports");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TourLeaderVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("IdentityDocumentsKeys")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TourLeaderGuid")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TourLeaderVerificationList");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TourReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdminResponse")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReporteText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReporteTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReporterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetTourId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.HasIndex("TargetTourId");

                    b.ToTable("TourReport");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TourReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("NationalCode")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("PhoneNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TourId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("TourReservation");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.AccountsEntities.AdminAccount", b =>
                {
                    b.HasBaseType("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes");

                    b.Property<int>("AdminRole")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SupportTicketId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("SupportTicketId");

                    b.HasDiscriminator().HasValue("AdminAccount");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.AccountsEntities.TourLeaderAccount", b =>
                {
                    b.HasBaseType("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes");

                    b.PrimitiveCollection<string>("ActivityTours")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("AverageScores")
                        .HasColumnType("REAL");

                    b.Property<int>("ExperienceLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeaderAccountLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Subscription")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("TourLeaderHonors")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserCommentsKey")
                        .HasColumnType("TEXT");

                    b.ToTable("AccountBaseAttributes", t =>
                        {
                            t.Property("Subscription")
                                .HasColumnName("TourLeaderAccount_Subscription");
                        });

                    b.HasDiscriminator().HasValue("TourLeaderAccount");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.AccountsEntities.UserAccount", b =>
                {
                    b.HasBaseType("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes");

                    b.Property<string>("AboutMe")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("IdentityDocumentsKeys")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("SocialMediaLinks")
                        .HasColumnType("TEXT");

                    b.Property<int>("Subscription")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("UserAccount");
                });

            modelBuilder.Entity("AccountBaseAttributesSupportTicket", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes", null)
                        .WithMany()
                        .HasForeignKey("ReferrersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zarrin.Tourino.Core.Entities.SupportTicket", null)
                        .WithMany()
                        .HasForeignKey("TicketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TourUserAccount", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.AccountsEntities.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("TourUserMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zarrin.Tourino.Core.Entities.Tour", null)
                        .WithMany()
                        .HasForeignKey("TripsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.ActivitieLogs", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes", "Account")
                        .WithMany("Logs")
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.ActivityArea", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.AccountsEntities.TourLeaderAccount", null)
                        .WithMany("ActivityArea")
                        .HasForeignKey("TourLeaderAccountId");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.InterestsEntitie", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.AccountsEntities.TourLeaderAccount", null)
                        .WithMany("InterestsTourLeaders")
                        .HasForeignKey("TourLeaderAccountId");

                    b.HasOne("Zarrin.Tourino.Core.Entities.AccountsEntities.TourLeaderAccount", null)
                        .WithMany("InterestsTours")
                        .HasForeignKey("TourLeaderAccountId1");

                    b.HasOne("Zarrin.Tourino.Core.Entities.AccountsEntities.UserAccount", null)
                        .WithMany("InterestsTours")
                        .HasForeignKey("UserAccountId");

                    b.HasOne("Zarrin.Tourino.Core.Entities.AccountsEntities.UserAccount", null)
                        .WithMany("InterestsTourLeaders")
                        .HasForeignKey("UserAccountId1");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.Score", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.AccountsEntities.TourLeaderAccount", null)
                        .WithMany("AllTourLeaderScores")
                        .HasForeignKey("TourLeaderAccountId");

                    b.HasOne("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes", "Voter")
                        .WithMany()
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.SupportTicketMessage", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes", "MessageOwner")
                        .WithMany()
                        .HasForeignKey("MessageOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zarrin.Tourino.Core.Entities.SupportTicket", null)
                        .WithMany("TicketMessages")
                        .HasForeignKey("SupportTicketId");

                    b.HasOne("Zarrin.Tourino.Core.Entities.SupportTicketMessage", null)
                        .WithMany("SubMessages")
                        .HasForeignKey("SupportTicketMessageId");

                    b.Navigation("MessageOwner");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.Tour", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.AccountsEntities.TourLeaderAccount", "TourOwner")
                        .WithMany("Tours")
                        .HasForeignKey("TourOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourOwner");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TourLeaderReport", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zarrin.Tourino.Core.Entities.AccountsEntities.TourLeaderAccount", "TourLeader")
                        .WithMany("Reports")
                        .HasForeignKey("TourLeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reporter");

                    b.Navigation("TourLeader");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TourReport", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zarrin.Tourino.Core.Entities.Tour", "TargetTour")
                        .WithMany("Reports")
                        .HasForeignKey("TargetTourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reporter");

                    b.Navigation("TargetTour");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.TourReservation", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.Tour", null)
                        .WithMany("TourNotUserMembers")
                        .HasForeignKey("TourId");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.AccountsEntities.AdminAccount", b =>
                {
                    b.HasOne("Zarrin.Tourino.Core.Entities.SupportTicket", null)
                        .WithMany("Responders")
                        .HasForeignKey("SupportTicketId");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.CommonEntities.AccountBaseAttributes", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.SupportTicket", b =>
                {
                    b.Navigation("Responders");

                    b.Navigation("TicketMessages");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.SupportTicketMessage", b =>
                {
                    b.Navigation("SubMessages");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.Tour", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("TourNotUserMembers");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.AccountsEntities.TourLeaderAccount", b =>
                {
                    b.Navigation("ActivityArea");

                    b.Navigation("AllTourLeaderScores");

                    b.Navigation("InterestsTourLeaders");

                    b.Navigation("InterestsTours");

                    b.Navigation("Reports");

                    b.Navigation("Tours");
                });

            modelBuilder.Entity("Zarrin.Tourino.Core.Entities.AccountsEntities.UserAccount", b =>
                {
                    b.Navigation("InterestsTourLeaders");

                    b.Navigation("InterestsTours");
                });
#pragma warning restore 612, 618
        }
    }
}
